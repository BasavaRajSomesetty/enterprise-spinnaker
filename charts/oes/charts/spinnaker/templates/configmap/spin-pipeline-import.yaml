apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "spinnaker.fullname" . }}-spin-pipeline-import
  labels:
{{ include "spinnaker.standard-labels" . | indent 4 }}
data:
  spin-pipeline-import.sh: |-
    #!/bin/bash
    echo \"Waiting for all Spinnaker Services to come-up\"
    wait_period=0
    while true
    do
    kubectl get po -n {{ .Release.Namespace }} -o jsonpath='{range .items[*]}{..metadata.name}{"\t"}{..containerStatuses..ready}{"\n"}{end}' > /tmp/inst.status
    CLOUDRO=$(grep spin-clouddriver-ro /tmp/inst.status |grep -v deck | awk '{print $2}')
    CLOUDRODECK=$(grep spin-clouddriver-ro-deck /tmp/inst.status | awk '{print $2}')
    CLOUDRW=$(grep spin-clouddriver-rw /tmp/inst.status | awk '{print $2}')
    CLOUDCACHING=$(grep spin-clouddriver-caching /tmp/inst.status | awk '{print $2}')
    DECK=$(grep spin-deck /tmp/inst.status | awk '{print $2}')
    ECHOWORKER=$(grep spin-echo-worker /tmp/inst.status | awk '{print $2}')
    ECHOSCHEDULER=$(grep spin-echo-scheduler  /tmp/inst.status | awk '{print $2}')
    FRONT=$(grep spin-front /tmp/inst.status  | awk '{print $2}')
    GATE=$(grep spin-gate /tmp/inst.status | awk '{print $2}')
    FIAT=$(grep spin-fiat /tmp/inst.status | awk '{print $2}')
    ORCA=$(grep spin-orca /tmp/inst.status | awk '{print $2}')
    SAPORGATE=$(grep sapor-gate /tmp/inst.status | awk '{print $2}')
    OESGATE=$(grep oes-gate /tmp/inst.status | awk '{print $2}')
    wait_period=$(($wait_period+10))
    {{- if .Values.global.commonGate.spinnakerRBAC }}
    if [ "$DECK" == "true" ] && [ "$CLOUDCACHING" == "true" ] && [ "$CLOUDRO" == "true" ] && [ "$CLOUDRW" == "true" ] && [ "$CLOUDRODECK" == "true" ] && [ "$FRONT" == "true" ] && [ "$GATE" == "true" ] && [ "$ORCA" == "true" ] && [ "$ECHOWORKER" == "true" ] && [ "$ECHOSCHEDULER" == "true" ] && [ "$FIAT" == "true" ] && [ "$SAPORGATE" == "true" ] && [ "$OESGATE" == "true" ];
    {{- else }}
    if [ "$DECK" == "true" ] && [ "$CLOUDCACHING" == "true" ] && [ "$CLOUDRO" == "true" ] && [ "$CLOUDRW" == "true" ] && [ "$CLOUDRODECK" == "true" ] && [ "$FRONT" == "true" ] && [ "$GATE" == "true" ] && [ "$ORCA" == "true" ] && [ "$ECHOWORKER" == "true" ] && [ "$ECHOSCHEDULER" == "true" ] && [ "$SAPORGATE" == "true" ] && [ "$OESGATE" == "true" ];
    {{- end }}
    then
        echo \"Spinnaker and OES is Installed and ready\"
        echo "processing.........."
        sleep 2m
        mkdir -p /tmp/config/git/
        git -c {{ .Values.gitopsHalyard.repo.configArgs }} clone https://github.com/OpsMx/sample-pipelines.git /tmp/config/git/
        if [[ $? != 0 ]]; then
        echo "ERROR: Failed while cloning the repo https://github.com/OpsMx/sample-pipelines.git"
          exit 1
        fi
        cd /tmp/config/git
        cp -p /tmp/config/spin/config .
        sed 's/$/ --config config/' create-app.sh >create-app1.sh
        sleep 10
        spin application save --application-name spinapp --owner-email opsmx@opsmx.com --cloud-providers "kubernetes" --config config  > /dev/null 2>&1
        if [[ $? != 0 ]]; then
        echo "ERROR: Failed to Save the Application using the spincli. Please check the spincli configuration in {{ .Release.Namespace }}-spinnaker-spin-config  secret"
        exit 1
        else
           spin application delete spinapp --config config > /dev/null 2>&1
           echo "Saving the applications and pipelines..."
           bash -xe create-app1.sh
           break
        fi
    else
        if [ $wait_period -gt 1800 ];
        then
            echo \"Script is timed out as the Spinnaker is not ready in 30 min.......\"
            break
        else
            echo \"Waiting for Spinnaker services to be ready\"
            sleep 1m
        fi
    fi
    done
